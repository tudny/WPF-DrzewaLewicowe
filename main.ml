open Leftist;;

let q0 = empty;;
let q1 = empty;;
let q2 = empty;;
assert ((is_empty q0) = false);;
let q0 = add (112) q0;;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let (e, q0) = (delete_min q0);;
assert ( e = (112));;
let q2 = add (196) q2;;
let q2 = add (27) q2;;
let b = is_empty q0;;
assert (b);;
assert (try let _ = delete_min q0 in false with Empty -> true);;
let b = is_empty q0;;
assert (b);;
assert (try let _ = delete_min q0 in false with Empty -> true);;
let q2 = add (23) q2;;
let q1 = add (-5) q1;;
let (e, q2) = (delete_min q2);;
assert ( e = (23));;
assert ((is_empty q0) = false);;
let q0 = add (-98) q0;;
let (e, q0) = (delete_min q0);;
assert ( e = (-98));;
let q2 = add (187) q2;;
assert ((is_empty q0) = false);;
let q0 = add (-71) q0;;
let (e, q1) = (delete_min q1);;
assert ( e = (-5));;
let (e, q0) = (delete_min q0);;
assert ( e = (-71));;
let q2 = add (-1) q2;;
let b = is_empty q0;;
assert (b);;
assert (try let _ = delete_min q0 in false with Empty -> true);;
assert ((is_empty q1) = false);;
let q1 = add (41) q1;;
let (e, q1) = (delete_min q1);;
assert ( e = (41));;
let (e, q2) = (delete_min q2);;
assert ( e = (-1));;
let q2 = add (-199) q2;;
let b = is_empty q0;;
assert (b);;
assert (try let _ = delete_min q0 in false with Empty -> true);;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let b = is_empty q0;;
assert (b);;
assert (try let _ = delete_min q0 in false with Empty -> true);;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let q2 = add (186) q2;;
assert ((is_empty q0) = false);;
let q0 = add (-57) q0;;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let (e, q0) = (delete_min q0);;
assert ( e = (-57));;
let (e, q2) = (delete_min q2);;
assert ( e = (-199));;
let q0 = add (158) q0;;
assert ((is_empty q0) = false);;
let q0 = add (48) q0;;
let (e, q0) = (delete_min q0);;
assert ( e = (48));;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let b = is_empty q1;;
assert (b);;
assert (try let _ = delete_min q1 in false with Empty -> true);;
let (e, q2) = (delete_min q2);;
assert ( e = (27));;
let q0 = add (187) q0;;
let q0 = add (82) q0;;
let q2 = add (10) q2;;
let (e, q2) = (delete_min q2);;
assert ( e = (10));;
assert ((is_empty q0) = false);;
let q0 = add (-147) q0;;
let (e, q2) = (delete_min q2);;
assert ( e = (186));;
let q0 = add (59) q0;;
assert ((is_empty q0) = false);;
let q0 = add (-86) q0;;
let q0 = add (176) q0;;
let (e, q2) = (delete_min q2);;
assert ( e = (187));;
let q0 = add (198) q0;;
let (e, q0) = (delete_min q0);;
assert ( e = (-147));;
let (e, q2) = (delete_min q2);;
assert ( e = (196));;
let b = is_empty q2;;
assert (b);;
assert (try let _ = delete_min q2 in false with Empty -> true);;
let b = is_empty q2;;
assert (b);;
assert (try let _ = delete_min q2 in false with Empty -> true);;
assert ((is_empty q0) = false);;
let q0 = add (151) q0;;
let q2 = add (27) q2;;
let q0 = add (141) q0;;
let q2 = add (-155) q2;;
let q0 = add (169) q0;;
let (e, q0) = (delete_min q0);;
assert ( e = (-86));;
let q3 = join q1 q0;;
assert ((is_empty q2) = false);;
let q2 = add (36) q2;;
let (e, q3) = (delete_min q3);;
assert ( e = (59));;
assert ((is_empty q2) = false);;
let q2 = add (-77) q2;;
let q1 = add (78) q1;;
assert ((is_empty q1) = false);;
let q1 = add (44) q1;;
let q0 = add (69) q0;;
let q3 = add (-33) q3;;
let q3 = add (-44) q3;;
let q4 = join q2 q0;;
assert ((is_empty q2) = false);;
let q2 = add (-196) q2;;
let q4 = add (-181) q4;;
let (e, q0) = (delete_min q0);;
assert ( e = (59));;
assert ((is_empty q4) = false);;
let q4 = add (-139) q4;;
let (e, q4) = (delete_min q4);;
assert ( e = (-181));;
let (e, q1) = (delete_min q1);;
assert ( e = (44));;
let (e, q0) = (delete_min q0);;
assert ( e = (69));;
assert ((is_empty q0) = false);;
let q0 = add (183) q0;;
let (e, q2) = (delete_min q2);;
assert ( e = (-196));;
assert ((is_empty q1) = false);;
let q1 = add (195) q1;;
assert ((is_empty q4) = false);;
let q4 = add (-88) q4;;
let q0 = add (-191) q0;;
let q0 = add (-63) q0;;
let (e, q4) = (delete_min q4);;
assert ( e = (-155));;
assert ((is_empty q1) = false);;
let q1 = add (170) q1;;
assert ((is_empty q3) = false);;
let q3 = add (-11) q3;;
assert ((is_empty q1) = false);;
let q1 = add (-27) q1;;
let q3 = add (-35) q3;;
assert ((is_empty q0) = false);;
let q0 = add (-142) q0;;
let (e, q3) = (delete_min q3);;
assert ( e = (-44));;
let (e, q2) = (delete_min q2);;
assert ( e = (-155));;
let (e, q0) = (delete_min q0);;
assert ( e = (-191));;
let q2 = add (62) q2;;
assert ((is_empty q3) = false);;
let q3 = add (103) q3;;
let (e, q2) = (delete_min q2);;
assert ( e = (-77));;
let (e, q2) = (delete_min q2);;
assert ( e = (27));;
let (e, q2) = (delete_min q2);;
assert ( e = (36));;
let q1 = add (-6) q1;;
let (e, q2) = (delete_min q2);;
assert ( e = (62));;
let q5 = join q3 q0;;
let (e, q1) = (delete_min q1);;
assert ( e = (-27));;
let (e, q4) = (delete_min q4);;
assert ( e = (-139));;
let b = is_empty q2;;
assert (b);;
assert (try let _ = delete_min q2 in false with Empty -> true);;
assert ((is_empty q2) = false);;
let q2 = add (-158) q2;;
let (e, q4) = (delete_min q4);;
assert ( e = (-88));;
let (e, q2) = (delete_min q2);;
assert ( e = (-158));;
assert ((is_empty q1) = false);;
let q1 = add (109) q1;;
let (e, q5) = (delete_min q5);;
assert ( e = (-142));;
let q2 = add (102) q2;;
let q6 = join q1 q3;;
let (e, q4) = (delete_min q4);;
assert ( e = (-77));;
let (e, q3) = (delete_min q3);;
assert ( e = (-35));;
let (e, q3) = (delete_min q3);;
assert ( e = (-33));;
let q3 = add (-71) q3;;
let (e, q4) = (delete_min q4);;
assert ( e = (27));;
let q4 = add (-65) q4;;
let q5 = add (-26) q5;;
let (e, q5) = (delete_min q5);;
assert ( e = (-63));;
let (e, q3) = (delete_min q3);;
assert ( e = (-71));;
let (e, q5) = (delete_min q5);;
assert ( e = (-35));;
assert ((is_empty q4) = false);;
let q4 = add (-59) q4;;
assert ((is_empty q2) = false);;
let q2 = add (-84) q2;;
let (e, q6) = (delete_min q6);;
assert ( e = (-35));;
let (e, q4) = (delete_min q4);;
assert ( e = (-65));;
let q0 = add (-104) q0;;
let (e, q6) = (delete_min q6);;
assert ( e = (-33));;
let (e, q6) = (delete_min q6);;
assert ( e = (-11));;
assert ((is_empty q0) = false);;
let q0 = add (136) q0;;
let (e, q6) = (delete_min q6);;
assert ( e = (-6));;
let (e, q2) = (delete_min q2);;
assert ( e = (-84));;
let q7 = join q3 q5;;
let (e, q7) = (delete_min q7);;
assert ( e = (-33));;
let (e, q0) = (delete_min q0);;
assert ( e = (-142));;
let q5 = add (-179) q5;;
let q5 = add (94) q5;;
let q1 = add (-12) q1;;
let q5 = add (115) q5;;
let (e, q6) = (delete_min q6);;
assert ( e = (78));;
let q0 = add (-150) q0;;
assert ((is_empty q6) = false);;
let q6 = add (-196) q6;;
let (e, q3) = (delete_min q3);;
assert ( e = (-11));;
let (e, q5) = (delete_min q5);;
assert ( e = (-179));;
let (e, q5) = (delete_min q5);;
assert ( e = (-33));;
let (e, q0) = (delete_min q0);;
assert ( e = (-150));;
let (e, q5) = (delete_min q5);;
assert ( e = (-26));;
let (e, q3) = (delete_min q3);;
assert ( e = (82));;
let q7 = add (-129) q7;;
let q8 = join q3 q1;;
let q9 = join q1 q8;;
let (e, q1) = (delete_min q1);;
assert ( e = (-12));;
assert ((is_empty q6) = false);;
let q6 = add (78) q6;;
let (e, q0) = (delete_min q0);;
assert ( e = (-104));;
let (e, q1) = (delete_min q1);;
assert ( e = (-6));;
let (e, q5) = (delete_min q5);;
assert ( e = (-11));;
let (e, q7) = (delete_min q7);;
assert ( e = (-129));;
let q2 = add (-53) q2;;
let (e, q3) = (delete_min q3);;
assert ( e = (103));;
let (e, q0) = (delete_min q0);;
assert ( e = (-63));;
let (e, q8) = (delete_min q8);;
assert ( e = (-12));;
let (e, q7) = (delete_min q7);;
assert ( e = (-26));;
assert ((is_empty q1) = false);;
let q1 = add (-18) q1;;
let (e, q1) = (delete_min q1);;
assert ( e = (-18));;
let q3 = add (-103) q3;;
let q8 = add (20) q8;;
let q3 = add (104) q3;;
assert ((is_empty q8) = false);;
let q8 = add (-6) q8;;
let (e, q8) = (delete_min q8);;
assert ( e = (-6));;
let (e, q2) = (delete_min q2);;
assert ( e = (-53));;
let q3 = add (100) q3;;
let q3 = add (69) q3;;
let q7 = add (-37) q7;;
let (e, q5) = (delete_min q5);;
assert ( e = (82));;
let (e, q1) = (delete_min q1);;
assert ( e = (78));;
let q0 = add (-181) q0;;
let (e, q7) = (delete_min q7);;
assert ( e = (-37));;
let q5 = add (-61) q5;;
assert ((is_empty q0) = false);;
let q0 = add (-8) q0;;
let q8 = add (-71) q8;;
let q10 = join q4 q3;;
let (e, q1) = (delete_min q1);;
assert ( e = (109));;
let q4 = add (70) q4;;
let (e, q5) = (delete_min q5);;
assert ( e = (-61));;
let q5 = add (156) q5;;
assert ((is_empty q5) = false);;
let q5 = add (38) q5;;
let (e, q7) = (delete_min q7);;
assert ( e = (-11));;
assert ((is_empty q10) = false);;
let q10 = add (-126) q10;;
let q0 = add (143) q0;;
let q2 = add (-95) q2;;
let (e, q0) = (delete_min q0);;
assert ( e = (-181));;
let (e, q6) = (delete_min q6);;
assert ( e = (-196));;
let q3 = add (177) q3;;
let q8 = add (-63) q8;;
let (e, q5) = (delete_min q5);;
assert ( e = (38));;
let (e, q8) = (delete_min q8);;
assert ( e = (-71));;
assert ((is_empty q1) = false);;
let q1 = add (-104) q1;;
let q5 = add (-145) q5;;
let (e, q2) = (delete_min q2);;
assert ( e = (-95));;
assert ((is_empty q4) = false);;
let q4 = add (-165) q4;;
let (e, q9) = (delete_min q9);;
assert ( e = (-12));;
let q10 = add (-132) q10;;
let (e, q8) = (delete_min q8);;
assert ( e = (-63));;
